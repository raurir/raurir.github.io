"use strict";var isNode="undefined"!=typeof module;if(isNode)var rand=require("./rand.js"),dom=require("./dom.js"),colours=require("./colours.js"),geom=require("./geom.js");var getRotationRange=function(sides){return 3*(90-180*(sides-2)/sides||45)/180*Math.PI},polygon_slice=function(){return function(){var r=rand.instance(),c=colours.instance(r),TAU=2*Math.PI,bmp=dom.canvas(1,1),ctx=bmp.ctx,backgroundColour=void 0,progress=void 0,border=void 0,cutHalf=void 0,maxDepth=void 0,minArea=void 0,radius=void 0,sh=void 0,size=void 0,startAngle=void 0,sw=void 0,settings={rotation:{type:"Number",label:"Rotation",min:0,max:9,cur:0},maxDepth:{type:"Number",label:"Max Depth",min:2,max:8,cur:2},background:{type:"Boolean",label:"Background",cur:!1}},drawPolygon=function(points,_ref){var lineWidth=_ref.lineWidth,strokeStyle=_ref.strokeStyle,fillStyle=_ref.fillStyle;points&&(ctx.beginPath(),points.forEach(function(p,i){ctx[0==i?"moveTo":"lineTo"](p.x*sw,p.y*sh)}),ctx.closePath(),lineWidth&&strokeStyle&&(ctx.strokeStyle=strokeStyle,ctx.lineWidth=lineWidth*size,ctx.stroke()),fillStyle&&(ctx.fillStyle=fillStyle,ctx.fill()))},drawAndSplit=function drawAndSplit(points,depth){var polygons=function(array){for(var cornerAlpha=r.getInteger(0,array.length-1),cornerBeta=(cornerAlpha+r.getInteger(1,array.length-1))%array.length,cornerMin=Math.min(cornerAlpha,cornerBeta),cornerMax=Math.max(cornerAlpha,cornerBeta),pointA0=array[cornerMin],pointA1=array[(cornerMin+1)%array.length],pointB0=array[cornerMax],pointB1=array[(cornerMax+1)%array.length],pointA=geom.lerp(pointA0,pointA1,cutHalf?.5:r.getNumber(.1,.9)),pointB=geom.lerp(pointB0,pointB1,cutHalf?.5:r.getNumber(.1,.9)),arrayMin=[],arrayMax=[],i=0;i<array.length;)i<=cornerMin?arrayMin.push(array[i]):cornerMin<i&&i<=cornerMax?(arrayMin.push(pointA,pointB),i=cornerMax):arrayMin.push(array[i]),i++;for(i=cornerMin+1,arrayMax.push(pointB,pointA);i<cornerMax+1;)arrayMax.push(array[i]),i++;return[arrayMin,arrayMax]}(points);depth++,polygons.forEach(function(poly){if(depth<settings.maxDepth.cur&&(0===minArea||geom.polygonArea(poly)>minArea))drawAndSplit(poly,depth);else{var polyInset=geom.insetPoints(poly,border);if(!polyInset)return;if(!geom.polygonsSimilar(poly,polyInset))return;if(geom.polygonSelfIntersecting(polyInset))return;drawPolygon(polyInset,function(){var style={},gradient=void 0,width=0,height=0;switch(r.getInteger(0,8)){case 0:style.lineWidth=.001,style.strokeStyle=c.getRandomColour();break;case 1:case 2:0===r.getInteger(0,1)?width=2*radius:height=2*radius,(gradient=ctx.createLinearGradient(.5-radius,.5-radius,width*sw,height*sh)).addColorStop(0,c.getRandomColour()),gradient.addColorStop(1,c.getRandomColour()),style.fillStyle=gradient;break;default:style.fillStyle=c.getRandomColour()}return style}())}})},init=function(options){progress=options.progress||function(){},r.setSeed(options.seed),size=options.size,sw=options.sw||size,sh=options.sh||size,c.getRandomPalette(),bmp.setSize(sw,sh),border=-r.getNumber(.002,.01),radius=r.getNumber(.3,.5),cutHalf=.2<r.getNumber(0,1),minArea=0===r.getInteger(0,1)?0:r.getNumber(.05,.8*radius),maxDepth=r.getInteger(2,8),settings.rotation.cur=r.getInteger(0,9),settings.maxDepth.cur=maxDepth,settings.background.cur=3<r.getInteger(0,4),options.settings&&(settings=options.settings),progress("settings:initialised",settings);var sides=r.getInteger(3,7);startAngle=settings.rotation.cur/settings.rotation.max*getRotationRange(sides);var points=new Array(sides).fill().map(function(side,i){var a=i/sides*-TAU;return{x:Math.sin(a)*radius,y:Math.cos(a)*radius}});backgroundColour=c.getRandomColour(),settings.background.cur?(ctx.fillStyle=backgroundColour,ctx.fillRect(0,0,sw,sh)):ctx.clearRect(0,0,sw,sh),ctx.save(),ctx.translate(.5*sw,.5*sh),ctx.rotate(startAngle),drawPolygon(points,{strokeStyle:c.getNextColour(),lineWidth:.001}),drawAndSplit(geom.insetPoints(points,border),0),progress("render:complete",bmp.canvas),ctx.restore()};return{stage:bmp.canvas,init:init,settings:settings,update:function(settings,seed){init({progress:progress,seed:seed,size:size,settings:settings})}}}};isNode?module.exports=polygon_slice():define("polygon_slice",polygon_slice);