"use strict";var polyhedra_three=function polyhedra_three(){var stage=document.createElement("div");var camera,scene,projector,renderer;var mouse={x:0,y:0};var sw=window.innerWidth,sh=window.innerHeight;sw=sh=400;var theta=0;var h=[];var i=0;var radius=20;var n;var polyhedron;var settings={};settings.lineScale=1;settings.lineSize=1+Math.random()*10*settings.lineScale;settings.lineGap=2+Math.random()*3*settings.lineScale;settings.baseRotation=0;settings.varyRotation=Math.random()*Math.PI*2;function createPattern(size){var half=size/2;var canvas=dom.canvas(size,size);var ctx=canvas.ctx;ctx.save();ctx.translate(half,half);ctx.rotate(settings.baseRotation+Math.random()*settings.varyRotation);ctx.translate(-half,-half);ctx.fillStyle=colours.getRandomColour();var padding=Math.sqrt(half*half*2)-half;var colour;var y=-padding;while(y<size+padding){colour=colours.getNextColour();ctx.fillStyle=colour;ctx.fillRect(-padding,y,size+padding*2,settings.lineSize);y+=settings.lineSize+settings.lineGap}return canvas.canvas}function draw(props){var i,il;var faces=[],faceRange=[],totalFaces=0;props.face.map(function(face){for(i=0,il=face.length-2;i<il;i++){faces.push(face[0],face[i+1],face[i+2])}totalFaces+=il;faceRange.push(totalFaces)});var vertices=[];props.vertex.map(function(vertex){vertex.map(function(vertexIndex){vertices.push(vertexIndex)})});var materials=[];for(i=0,il=props.face.length;i<il;i++){var r=Math.round(Math.random()*255);var g=Math.round(Math.random()*255);var b=Math.round(Math.random()*255);var col=r<<16|g<<8|b;var material=new THREE.MeshLambertMaterial({color:col});materials.push(material)}var geometry=new THREE.PolyhedronGeometry(vertices,faces,200,0);con.log("geometry",geometry);var materialIndex=0;for(i=0,il=geometry.faces.length;i<il;i++){if(faceRange.indexOf(i)>-1)materialIndex++;geometry.faces[i].materialIndex=materialIndex}var material=new THREE.MeshFaceMaterial(materials);var object=new THREE.Mesh(geometry,material);return object}function init(){var time1=(new Date).getTime();scene=new THREE.Scene;camera=new THREE.PerspectiveCamera(70,sw/sh,1,1e4);camera.position.set(0,100,500);scene.add(camera);var light=new THREE.DirectionalLight(16777215,2);light.position.set(1,1,1).normalize();scene.add(light);var light=new THREE.DirectionalLight(16711935,2);light.position.set(-1,0,0).normalize();scene.add(light);renderer=new THREE.WebGLRenderer;renderer.setSize(sw,sh);var mesh=POLYHEDRA.Icosidodecahedron;polyhedron=draw(mesh);scene.add(polyhedron);stage.appendChild(renderer.domElement);document.addEventListener("mousemove",onDocumentMouseMove,false);var time2=(new Date).getTime();render();var time3=(new Date).getTime();con.log("times",time2-time1,time3-time2);animate()}function onDocumentMouseMove(event){event.preventDefault();mouse.x=event.clientX/sw*2-1;mouse.y=-(event.clientY/sh)*2+1}function render(){var camRadius=500;theta+=mouse.x*4;polyhedron.rotation.y=theta*.1;camera.lookAt(scene.position);renderer.render(scene,camera)}function animate(){requestAnimationFrame(animate);render()}var experiment={stage:stage,init:init};return experiment};define("polyhedra_three",polyhedra_three);